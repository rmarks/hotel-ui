@page "/rooms/{id:int}"
@page "/rooms/add"

@inject ISender Sender
@inject NavigationManager NavManager

<h2 class="mt-3 mb-5 text-center border-bottom">@(IsNew ? "Lisa" : "Muuda") tuba</h2>

@if (_room is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="_room" OnValidSubmit="SubmitForm">
        <FluentValidationValidator />

        <div class="row mb-3">
            <label class="col-2 col-form-label">Toa nr.</label>
            <div class="col-4">
                <InputText class="form-control" @bind-Value="_room.RoomNo" />
                <ValidationMessage For="() => _room.RoomNo" />
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-2 col-form-label">Kohtade arv</label>
            <div class="col-4">
                <InputNumber class="form-control" @bind-Value="_room.NumOfBeds" />
                <ValidationMessage For="() => _room.NumOfBeds" />
            </div>
        </div>
        <div class="mt-5 border-top pt-2">
            <a href="/rooms" class="btn btn-secondary">Loobu</a>
            <button type="submit" class="btn btn-primary">Salvesta</button>
        </div>
    </EditForm>
}

@code {
    private RoomModel? _room;

    [Parameter]
    public int? Id { get; set; }

    private bool IsNew => Id is null;

    protected override async Task OnInitializedAsync()
    {
        _room = IsNew
            ? new()
            : await Sender.Send(new GetRoomRequest((int)Id!));
    }

    private async Task SubmitForm()
    {
        bool isSuccess = IsNew
            ? await Sender.Send(new CreateRoomRequest(_room!))
            : await Sender.Send(new UpdateRoomRequest(_room!));

        if (isSuccess)
        {
            NavManager.NavigateTo("/rooms");
        }
    }
}
